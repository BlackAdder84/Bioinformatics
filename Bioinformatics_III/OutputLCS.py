from LCSBackTrack import LCSBackTrack


# works
"""
Performs a global alignment of seq1 and seq2 and returns the Longest Common substring
"""
def OutputLCS(seq1, seq2):
    BT = LCSBackTrack(seq1, seq2)  #1:up, 2: left 3: diag
    nrows, ncols = BT.shape
    node = [nrows-1, ncols-1]
    idx1 = len(seq1) - 1
    idx2 = len(seq2) - 1
    LCS = []
    while node[0] != 0 and node[1] != 0:
        if BT[node[0]][node[1]] == 1:
            node[0] -= 1
            idx1 -= 1
        elif BT[node[0]][node[1]] == 2:
            node[1] -= 1
            idx2 -= 1
        elif BT[node[0]][node[1]] == 3:
            node[0] -= 1
            node[1] -= 1
            LCS.append(seq1[idx1])
            idx1 -= 1
            idx2 -= 1

    return(''.join(LCS[::-1]))
    
    
def test():
    in_ = ['AACCTTGG', 'ACACTGTGA']
    out_ = 'AACTTG'
    assert(OutputLCS(in_[0],in_[1]) == out_), "TEST 1 FAILED"


if __name__ == "__main__":
    out_ = OutputLCS('GCTGTTCCGCATACAAATACTGGACAACATCGGAAACACGTTTTCAAGGCGCCATCTAGCGCACGCGGGTGTATTTACACGAGGAGTTACATTGGCGTAGTGTCGCATCCACGTAGCGCCCCTAGCTCATATATTTCTGTCCCCTAGGCGTAGTCGCGTCCTGTTGAAGTAATCATCGCGGGTACAGAGTTGGAATTATCCAGCGTGTGCAACGCTGACTCGCCTGTCACTGTGGGTATGCGACAACTTCTCTGATGGCGTCATGCTTTGTTCGTTCATTTCCGTAAGTGAAGCAAATATGTATCCCCCTTGAACACAGCTAAAGGTCTGAGAAACTCTTACCTCCTATCCTAATCGGTCCCTTTGCTTTGAAGGTTTAGTTCCTTTTACCATATAGGCTGTTTTAAGATCCATGAAAACATACTAAGGCCCTGCGTGAACAAGGATTGTTAAAGAAGAGCACATCAGCGGACTCCGAGGCGCCAGTCCATAGTCTCCCCATCAAGCGGAAAGAAAGCCAACCAGCTGGGTGCCTTCCCCCATGGAGGGATTGTGGAGTCGCCCGCCGGGGGGGAACCGTCGTGCCATAATTCACGATTTGCTTGTGGCGCGACAATGCCTCTAGTGTAGTGCGTAGATGGTACCCCTCGAATTGTGACGTTCGTACAACGACGATGGAACACTGGAGTTAGAAGGGTAAGAAACTGAGAATTGGTGCGGCCACTATCGGCCGTCTACTGCCCTGAGCATTGATTGTAGTTTTGCATGTATACAGTTCCGCATTCGATCGTAAACAAGCACCTTTGCCTC','CTCCGTACCGTCATAGCCTACGGTGGAAACGTATAACCAGGGATGATCTTTACTTCTCGACAACACGATTAGCCACGGGCCATCGCGATGACACGGACGACAATGCTCTTTGTGTTATGTGGTCCGAAAAATAGCTTCTCAAACCGTACTGGTTGACAACAAGGTTTGCGTACCTGAGAGGGGTTGCGACATCTCCAAGGTGGGGGTCGTCTGTTAATAGCTCAGACGAAACTGTACACCTGGGCGATGTCGGCCCTTACAATCCTAGTCCCGCTCCTGATCCCTCATACGAGTAGCTGTTATATTACGTCAACAACTTATCAAGCAGTATAGTAAATTGACGGTTAGAGTATGGACAGTATTCCGGGGCGATAGGTTACTGGGGCTCGTGGTGCTCGCTACAGGCGCAATAACATCAAGAGACTGTTGAAAACTTGCGTTTCAAGTCTAGTATCAGGTTGGTTAATTCGAGGTCGTGTAAGTACATCGGAGATAATCCTCTCGAAACCCAATTGCCGTGGGTCTGGTCACCATCGAGTCCCTTCCTGTTCACGATCAGTTGTATGACAACTACCCCAAAAACGGTCGAGAATCCTGTGATGCTTGACAACTGGAGTGAGCGCTGGCAATAGCGTTTTCTTCTACAGGGGGACAGACTAAATACCTCAGAATTTTGCGACAACTTACGGTAACTGGGTTCCCTCTACTTTGGTTACTACTTGCCCCCAGGTCGATACAACTTAACGTATAAAAACTCCGATTCCGAGACAGAGCACGGATTGATAAGATCGGCAAGTAGACTATCTGGAGGGGAGAGATTAAAGGGCACGACCAATAGCATAGGATAAGGCTTGAGAAACACAGAGCTTTTAGCCTATTACAGTGAATACGCCTTCGAAAGGAAGTGGCTTCAACAAGGT')
    print(out_)